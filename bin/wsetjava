#!/usr/bin/python

# author: WatchDogOblivion
# description: TODO
# WatchDogs Set Java a.k.a wsetjava

import re;
import argparse;
import traceback;
import subprocess;

class WSetJava():

    VERSION = "1.0";

    JAVA_PATHS = {
        "java7":["/usr/lib/jvm/jdk1.7.0_80/bin/java","/usr/lib/jvm/jdk1.7.0_80/bin/javac"],
        "java8":["/usr/lib/jvm/jdk1.8.0_301/bin/java","/usr/lib/jvm/jdk1.8.0_301/bin/javac"],
        "java11":["/usr/lib/jvm/java-11-openjdk-amd64/bin/java","/usr/lib/jvm/java-11-openjdk-amd64/bin/javac"]
    }

    def __init__(self):
        self.set = None;
        self.parser = None;
        self.args = None;
    
    @staticmethod
    def toCamel(string,char="_"):
        camel = "";
        strings = string.split(char);
        length = len(strings);
        for i in range(length):
            s = strings[i];
            if(i == 0):
                camel += s.lower();
            else:
                camel += s[0].upper() + s[1:].lower();
        return camel;

    @staticmethod
    def naturalOrdering(string):
        specArray = []
        stringArray = re.split(r'(\d+)', string);
        for s in stringArray:
            if(s.isdigit()):
                specArray.append(int(s));
            else:
                specArray.append(s);
        return specArray;

    def getJavaAlts(self):
        de = "  ";
        javaAlts = subprocess.check_output("update-alternatives --list java", shell=True);
        javacAlts = subprocess.check_output("update-alternatives --list javac", shell=True);

        javaAlts = "{}{}".format(de, javaAlts.replace("\n", "\n"+de));
        javacAlts = "{}{}".format(de, javacAlts.replace("\n", "\n"+de));

        return "Java Alternatives:\n{}\n{}".format(javaAlts, javacAlts.rstrip());
    
    def getJavaPaths(self):
        javaPaths = WSetJava.JAVA_PATHS;
        javaPathsString = "";

        keys =sorted(javaPaths.iterkeys(), key=WSetJava.naturalOrdering);
        for key in keys:
            javaPathsString += "  {} {}\n".format(key,javaPaths[key]);
            
        return javaPathsString;

    def getJavaVersion(self):
        return subprocess.check_output("java -version", stderr=subprocess.STDOUT, shell=True);

    def getInfo(self):
        return """To ensure the script works properly, check the JAVA_PATHS flag to ensure that they are pointing to the correct directories. If not, update them."""

    def parseArgs(self):
        self.parser = argparse.ArgumentParser(add_help=False, formatter_class=argparse.RawTextHelpFormatter);
        parser = self.parser;
        required = parser.add_argument_group("Required arguments",);
        required.add_argument("-s", "--set", required=True, help="Specify the java version to set, like so - java$(version). Example: java11", type=str, metavar="");
        parser.add_argument("-ja", "--java-alts", action="version", help="List Java alts", version="{}".format(self.getJavaAlts()));
        parser.add_argument("-jp", "--java-paths", action="version", help="Shows the values of the java paths added to the JAVA_PATHS field in this script.", version="{}".format(self.getJavaPaths()));
        parser.add_argument("-jv", "--java-version", action="version", help="Show java version", version="Java version: {}".format(self.getJavaVersion()));
        parser.add_argument("-v", "--version", action="version", help="Show script version", version="Set Java version: {}".format(WSetJava.VERSION));
        parser.add_argument("-h", "--help", action="help", help="Show this help message");
        parser.add_argument("-i", "--info", action="version", help="Displays additional info about the script", version="{}".format(self.getInfo()));
        self.args = parser.parse_args();

    def setArguments(self):
        args = self.args;
        vargs = vars(args);
        for varg in vargs:
            setattr(self, WSetJava.toCamel(varg), vargs[varg]);
        
    def setJava(self):
        print("Setting version: {}".format(self.set));
        installJava = "sudo update-alternatives --install '/usr/bin/java' 'java' '{}' 0".format(WSetJava.JAVA_PATHS[self.set][0]);
        installJavac = "sudo update-alternatives --install '/usr/bin/javac' 'javac' '{}' 0".format(WSetJava.JAVA_PATHS[self.set][1]);
        setJava = "sudo update-alternatives --set java {}".format(WSetJava.JAVA_PATHS[self.set][0]);
        setJavac = "sudo update-alternatives --set javac {}".format(WSetJava.JAVA_PATHS[self.set][1]);
        for command in [installJava, installJavac, setJava, setJavac]:
            print("Executing comand: {}".format(command));
            print(subprocess.check_output("{}".format(command), stderr=subprocess.STDOUT, shell=True));


def __main__():
    wsj = WSetJava();
    try:
        wsj.parseArgs();
        wsj.setArguments();
        wsj.setJava();
    except ValueError as ve:
        print(ve);
        print(wsj.parser.print_usage());
    except Exception as e:
        print(traceback.format_exc());
        print(wsj.parser.print_usage());

__main__();